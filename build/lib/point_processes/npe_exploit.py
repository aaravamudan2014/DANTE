# from sklearn.linear_model import LogisticRegression
# modified_training_features = np.zeros((len(training_features), 3))
# for index,feature in enumerate(training_features):
#     modified_training_features[index] = np.array([feature[0], feature[1], 1])
# clf = LogisticRegression(random_state=0).fit(modified_training_features, training_isExploited)


# w_tilde = clf.coef_
# survival_df = convertRealizationsDataframeSplitPopNPE(training_realizations, modified_training_features, w_tilde)
# npe_df,obj_values = non_parametric_estimation_split_population(survival_df)

# npe_df  =npe_df[npe_df['time'] > 0]
# plt.title('Non-parametric estimate of base kernel')
# plt.xlabel('time (hrs)')
# plt.ylabel('alpha*Phi()')



# plt.show()
# mkS = SplineMemoryKernel(
    # x_vals=np.array(npe_df['time'].values), y_vals=np.array(np.cumsum(npe_df['h'].values)), timeOffset=0.0)
# plt.plot(npe_df['time'],np.cumsum(npe_df['h']), label="Non-parametric Estimate")

# t_h_train = np.linspace(0,25000, 25000)
# plt.plot(t_h_train)
# plt.plot(t_h_train, mkS.phi(t_h_train), 'r', label='Spline kernel')
# plt.show()